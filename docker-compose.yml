# This file defines the services, networks, and volumes for the PacMusic application
# across different environments: development (CI), staging, and production.

services:
  # --------------------------------------------------------------------------
  # Development Service (for CI/CD Testing)
  # --------------------------------------------------------------------------
  # This service is used by the 'Dev Testing' GitHub Actions workflow.
  # It builds the image directly from the source code to run tests.
  pacmusic-dev:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: pacmusic-dev
    environment:
      MINIO_ENDPOINT: ${MINIO_DEV_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_DEV_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_DEV_SECRET_KEY}
    ports:
      - "5000:5000"
    networks:
      - pacmusic-network

  # --------------------------------------------------------------------------
  # Staging Service
  # --------------------------------------------------------------------------
  # This service is deployed to the staging environment on your server.
  # Like the dev service, it builds the image from the latest source code
  # pulled from the 'main' branch for final testing.
  pacmusic-stg:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: pacmusic-stg
    environment:
      MINIO_ENDPOINT: ${MINIO_STG_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_STG_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_STG_SECRET_KEY}
    ports:
      # The port is dynamically assigned using a variable from GitHub secrets.
      - "${APP_STG_PORT}:5000"
    networks:
      - pacmusic-network

  # --------------------------------------------------------------------------
  # Production Service
  # --------------------------------------------------------------------------
  # This is the service for your live, user-facing application.
  # CRITICAL DIFFERENCE: It does NOT build from source. Instead, it pulls a
  # specific, version-tagged image from a container registry (like Docker Hub).
  # This ensures a stable and predictable deployment.
  pacmusic-prod:
    image: "${APP_IMAGE}:${APP_TAG}"
    container_name: pacmusic-prod
    environment:
      MINIO_ENDPOINT: ${MINIO_PROD_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_PROD_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_PROD_SECRET_KEY}
    ports:
      # The port is dynamically assigned using a variable from GitHub secrets.
      - "${APP_PROD_PORT}:5000"
    networks:
      - pacmusic-network

# --------------------------------------------------------------------------
# Network Configuration
# --------------------------------------------------------------------------
# Defines a shared bridge network for all containers to communicate.
networks:
  pacmusic-network:
    driver: bridge
    name: pacmusic-network

# --------------------------------------------------------------------------
# Volume Configuration
# --------------------------------------------------------------------------
# Defines a volume, primarily for potential use with a MinIO service
# during local development or testing.
volumes:
  minio-dev-vol:
    driver: local
    name: minio-dev-vol
